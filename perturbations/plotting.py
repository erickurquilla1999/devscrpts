'''
Created by Erick Urquilla. University of Tennessee Knoxville, USA.
This script is used to plot the neutrino and antineutrino number matrices N_ab and 
fluxes ( Fx_ab , Fy_ab , Fz_ab ) and compare wit the LSA conducted in equation 14 of Johns, L. (2023). 
Collisional flavor instabilities of supernova neutrinos. Physical Review Letters, 130(19), 191001 
and Julien's  script that reproduces the same results (script received via private communication).
Data generated by EMU should first be reduced using the script `Emu/Scripts/data_reduction/reduce_data.py`.
'''
import numpy as np
import h5py
import glob
from plot_setting import apply_custom_settings
import matplotlib.pyplot as plt                                                                                                                  

# Create a list of data files to read
directories = glob.glob("plt*_reduced_data.h5")
# Sort the data file names by time step number
directories = sorted(directories, key=lambda x: int(x.split("plt")[1].split("_")[0]))

N_avg_mag    = np.zeros((len(directories),2,2))   # Magnitude of the domain-averaged neutrino number matrix : N_ab
Nbar_avg_mag = np.zeros((len(directories),2,2))   # Magnitude of the domain-averaged antineutrino number matrix : Nbar_ab
F_avg_mag    = np.zeros((len(directories),3,2,2)) # Domain-averaged neutrino flux vector matrices : F = ( Fx_ab , Fy_ab , Fz_ab ) 
Fbar_avg_mag = np.zeros((len(directories),3,2,2)) # Domain-averaged antineutrino flux vector matrices : Fbar = ( Fbarx_ab , Fbary_ab , Fbarz_ab ) 
t            = np.zeros(len(directories))         # Time

# Looping over all directories
for i in range(len(directories)):
    with h5py.File(directories[i], 'r') as hf:
        N_avg_mag[i]    = np.array(hf['N_avg_mag(1|ccm)'][:][0])
        Nbar_avg_mag[i] = np.array(hf['Nbar_avg_mag(1|ccm)'][:][0]) 
        F_avg_mag[i]    = np.array(hf['F_avg_mag(1|ccm)'][:][0])
        Fbar_avg_mag[i] = np.array(hf['Fbar_avg_mag(1|ccm)'][:][0])
        t[i]            = np.array(hf['t(s)'][:][0])

def calculate_im_omega(x, y):
    # This function compute the parameter b that better fit the exponential function 
    # ( y = a e ^ ( b x ) ) based on the data x and y
    coe = np.polyfit(x, np.log(y), 1)
    return coe[0] # Return b = coe[0]

# Just consider EMU data between file l1 and l2 in the 'directories' list.
l1 = 100 # initial item for fit
l2 = 200 # last item for fit

# Fitting N_eu and F_eu to e ^ ( b x ) 
N_eu_b  = calculate_im_omega(t[l1:l2],N_avg_mag[:,0,1]  [l1:l2])
Fx_eu_b = calculate_im_omega(t[l1:l2],F_avg_mag[:,0,0,1][l1:l2])
Fy_eu_b = calculate_im_omega(t[l1:l2],F_avg_mag[:,1,0,1][l1:l2])
Fz_eu_b = calculate_im_omega(t[l1:l2],F_avg_mag[:,2,0,1][l1:l2])
# Fitting Nbar_eu and Fbar_eu to e ^ ( b x ) 
Nbar_eu_b  = calculate_im_omega(t[l1:l2],Nbar_avg_mag[:,0,1]  [l1:l2])
Fbarx_eu_b = calculate_im_omega(t[l1:l2],Fbar_avg_mag[:,0,0,1][l1:l2])
Fbary_eu_b = calculate_im_omega(t[l1:l2],Fbar_avg_mag[:,1,0,1][l1:l2])
Fbarz_eu_b = calculate_im_omega(t[l1:l2],Fbar_avg_mag[:,2,0,1][l1:l2])

# Printing b
print(f'{N_eu_b :.3e} ---> EMU : Im Omega N_eu')
print(f'{Fx_eu_b:.3e} ---> EMU : Im Omega Fx_eu')
print(f'{Fy_eu_b:.3e} ---> EMU : Im Omega Fy_eu')
print(f'{Fz_eu_b:.3e} ---> EMU : Im Omega Fz_eu')
print(f'{Nbar_eu_b :.3e} ---> EMU : Im Omega Nbar_eu')
print(f'{Fbarx_eu_b:.3e} ---> EMU : Im Omega Fbarx_eu')
print(f'{Fbary_eu_b:.3e} ---> EMU : Im Omega Fbary_eu')
print(f'{Fbarz_eu_b:.3e} ---> EMU : Im Omega Fbarz_eu')

######################################################################################
######################################################################################
# Script written by Julien Froustey intended to reproduce the results first found in 
# Lohns, L. (2023). Collisional flavor instabilities of supernova neutrinos. Physical 
# Review Letters, 130(19), 191001. Received via private communication.

"""
Created on Wed Jun  5 13:11:50 2024
Solves the isotropic QKE following "Collisional flavor instabilities of supernova neutrinos", L. Johns [2104.11369]

@author: jfroustey
"""

from scipy.integrate import solve_ivp

h = 6.6260755e-27 # erg s
hbar = h/(2.*np.pi) # erg s
c = 2.99792458e10 # cm/s
MeV = 1.60218e-6 # erg
eV = MeV/1e6 # erg
GF_GeV2 = 1.1663787e-5 # GeV^-2
GF = GF_GeV2 / (1000*MeV)**2 * (hbar*c)**3 # erg cm^3

Nee = 3e33 # cm^-3
Neebar = 2.5e33 # cm^-3
Nxx = 1e33 # cm^-3

opac_rescale = 1e4

kappa_e = 1/(0.417*1e5)*opac_rescale # cm^-1
kappa_ebar = 1/(4.36*1e5)*opac_rescale # cm^-1
kappa_x = 0.*opac_rescale # cm^-1

# Collision rates (in s^-1)
Gamma_plus = (kappa_e+kappa_x)/2 * c 
Gamma_minus = (kappa_e-kappa_x)/2 * c 
Gammabar_plus = (kappa_ebar+kappa_x)/2 * c
Gammabar_minus= (kappa_ebar - kappa_x)/2 * c

# Vacuum term

theta = 1e-6
c2t = np.cos(2*theta)
s2t = np.sin(2*theta)
omega = 0.304*1e-5 * c # Delta m^2/2E, in s^-1

P0_AE = (Nee+Nxx)/2
Pz_AE = (Nee-Nxx)/2
Pbar0_AE = (Neebar+Nxx)/2
Pbarz_AE = (Neebar-Nxx)/2

mu = np.sqrt(2)*GF/hbar # s^-1.cm^3

def QKE(t,y):
    P0, Px, Py, Pz, Pbar0, Pbarx, Pbary, Pbarz = y
    deriv = np.zeros(8)
    
    # Variation of P0, Pbar0
    deriv[0] = Gamma_plus*(P0_AE-P0) + Gamma_minus*(Pz_AE-Pz)
    deriv[4] = Gammabar_plus*(Pbar0_AE-Pbar0) + Gammabar_minus*(Pbarz_AE - Pbarz)
    
    # Spatial parts
    deriv[1] = omega*c2t*Py + mu*((Py-Pbary)*Pz - (Pz-Pbarz)*Py) - Gamma_plus*Px
    deriv[2] = omega*(-s2t*Pz-c2t*Px) + mu*((Pz-Pbarz)*Px - (Px-Pbarx)*Pz) - Gamma_plus*Py
    deriv[3] = omega*s2t*Py + mu*((Px-Pbarx)*Py - (Py-Pbary)*Px) + Gamma_plus*(Pz_AE-Pz) + Gamma_minus*(P0_AE-P0)
    
    deriv[5] = -omega*c2t*Pbary + mu*((Py-Pbary)*Pbarz - (Pz-Pbarz)*Pbary) - Gammabar_plus*Pbarx
    deriv[6] = -omega*(-s2t*Pbarz - c2t*Pbarx) + mu*((Pz-Pbarz)*Pbarx - (Px-Pbarx)*Pbarz) - Gammabar_plus*Pbary
    deriv[7] = -omega*s2t*Pbary + mu*((Px-Pbarx)*Pbary - (Py-Pbary)*Pbarx) + Gammabar_plus*(Pbarz_AE-Pbarz) + Gammabar_minus*(Pbar0_AE-Pbar0)
    
    return deriv

time = np.linspace(0,90e-6/opac_rescale,2000)
y0 = np.array([P0_AE, 0., 0., Pz_AE, Pbar0_AE, 0., 0., Pbarz_AE])

myrtol, myatol = 1e-5, 1e-8
sol = solve_ivp(QKE, (time[0],time[-1]), y0, t_eval=time, rtol=myrtol, atol=myatol)

# PLOTS
# plt.plot(time, sol.y[0,:]+sol.y[3,:], color='k', lw=2, label=r'$n_{\nu_e}$')
# plt.plot(time, sol.y[4,:]+sol.y[7,:], color='k', lw=1.5, label=r'$n_{\bar{\nu}_e}$')
# plt.plot(time, sol.y[0,:]-sol.y[3,:], color='k', lw=1, label=r'$n_{\nu_x}$')
# plt.plot(time,np.sqrt(sol.y[1,:]**2+sol.y[2,:]**2), lw=2, color='teal',label=r'$\nu_e - \nu_x$'+" coherence density")
# plt.legend()
# plt.grid(ls=':',color='C7')
# plt.xlabel(r'$t \ (\mathrm{s})$')
# plt.xlim(time[0],time[-1])
# plt.title(f"Opacities scaled by {opac_rescale:.1e}, with rtol={myrtol:.1e}, atol={myatol:.1e}")
# plt.tight_layout()
# plt.savefig(f"Johns_CFI_rescale_{opac_rescale:.0e}_rtol_{myrtol:.0e}_atol_{myatol:.0e}.pdf")
# plt.close()

######################################################################################
######################################################################################
# LSA in equation 14 of "Collisional flavor instabilities of supernova neutrinos", L. Johns [2104.11369]

S = Nee - Nxx + Neebar - Nxx
D = Nee - Nxx - Neebar + Nxx
N_and_Nbar_eu_b_LSA = ( ( Gamma_plus - Gammabar_plus ) / 2 ) * ( mu * S / np.sqrt( ( mu * D )**2 + 4 * omega * mu * S ) ) - ( Gamma_plus + Gammabar_plus ) / 2

######################################################################################
######################################################################################

# Compute relative error of EMU with the LSA in equation 14 of "Collisional flavor instabilities of supernova neutrinos", L. Johns [2104.11369]
rel_error = np.abs( N_eu_b - N_and_Nbar_eu_b_LSA ) / np.abs( ( N_eu_b + N_and_Nbar_eu_b_LSA ) / 2 )
rel_error_bar = np.abs( Nbar_eu_b - N_and_Nbar_eu_b_LSA ) / np.abs( ( Nbar_eu_b + N_and_Nbar_eu_b_LSA ) / 2 )

p1 = 150 # initial point for fit
p2 = 500 # final point for fit
N_eu_julien = np.sqrt(sol.y[1,:]**2+sol.y[2,:]**2)
Nbar_eu_b_julien  = calculate_im_omega(time[p1:p2],N_eu_julien[p1:p2])
rel_error_julien = np.abs( Nbar_eu_b_julien - N_and_Nbar_eu_b_LSA ) / np.abs( ( Nbar_eu_b_julien + N_and_Nbar_eu_b_LSA ) / 2 )

print(f'{N_and_Nbar_eu_b_LSA:.3e} ---> Im Omega and Omegabar : LSA in equation 14 of L. Johns [2104.11369]')
print(f'{Nbar_eu_b_julien:.3e} ---> Im Omega Julien')
print(f"{rel_error:.3e} ---> relative error in ImOmega : EMU")
print(f"{rel_error_bar:.3e} ---> relative error in ImOmegabar : EMU")
print(f"{rel_error_julien:.3e} ---> relative error in Julien script")

######################################################################################
######################################################################################
# Genereting plots

# Plots N and Nbar
fig, ax = plt.subplots()
ax.plot(t, N_avg_mag[:,0,0],    label = r'$N_{ee}$')
ax.plot(t, N_avg_mag[:,0,1],    label = r'$N_{ex}$')
ax.plot(t, N_avg_mag[:,1,1],    label = r'$N_{xx}$')
ax.plot(t, Nbar_avg_mag[:,0,0], label = r'$\bar{N}_{ee}$')
ax.plot(t, Nbar_avg_mag[:,0,1], label = r'$\bar{N}_{ex}$')
ax.plot(t, Nbar_avg_mag[:,1,1], label = r'$\bar{N}_{xx}$')
leg = ax.legend(framealpha=0.0, ncol=2, fontsize=16)
apply_custom_settings(ax, leg)
ax.set_xlabel(r'$t$ (s)')
ax.set_ylabel(r'$N$ and $\bar{N}$')
fig.savefig('N_and_Nbar.pdf',bbox_inches='tight')
plt.clf()

# Plots N_eu and F_eu
fig, ax = plt.subplots()
ax.plot(t       , N_avg_mag[:,0,1]         , label = r'$N_{ex}$')
ax.plot(t       , F_avg_mag[:,0,0,1]       , label = r'$F^x_{ex}$') 
ax.plot(t       , F_avg_mag[:,1,0,1]       , label = r'$F^y_{ex}$')
ax.plot(t       , F_avg_mag[:,2,0,1]       , label = r'$F^z_{ex}$')
ax.plot(t[l1:l2], N_avg_mag[:,0,1][l1:l2]  , label = f'Im$\\Omega_{{N_{{ex}}}}$ = {N_eu_b:.3e}', linestyle = 'dotted')
ax.plot(t[l1:l2], F_avg_mag[:,0,0,1][l1:l2], label = f'Im$\\Omega_{{F^x_{{ex}}}}$ = {Fx_eu_b:.3e}', linestyle = 'dotted')
ax.plot(t[l1:l2], F_avg_mag[:,1,0,1][l1:l2], label = f'Im$\\Omega_{{F^y_{{ex}}}}$ = {Fy_eu_b:.3e}', linestyle = 'dotted')
ax.plot(t[l1:l2], F_avg_mag[:,2,0,1][l1:l2], label = f'Im$\\Omega_{{F^z_{{ex}}}}$ = {Fz_eu_b:.3e}', linestyle = 'dotted')
leg = ax.legend(framealpha=0.0, ncol=2, fontsize=10)
apply_custom_settings(ax, leg, log_scale_y=True)
ax.set_xlabel(r'$t$ (s)')
ax.set_ylabel(r'$N_{ex}$ and $\vec{F}_{ex}$')
fig.savefig('Neu_and_Feu.pdf',bbox_inches='tight')
plt.clf()

# Plots N_ee and F_ee
fig, ax = plt.subplots()
ax.plot(t       , N_avg_mag[:,0,0]         , label = r'$N_{ee}$')
ax.plot(t       , F_avg_mag[:,0,0,0]       , label = r'$F^x_{ee}$') 
ax.plot(t       , F_avg_mag[:,1,0,0]       , label = r'$F^y_{ee}$')
ax.plot(t       , F_avg_mag[:,2,0,0]       , label = r'$F^z_{ee}$')
leg = ax.legend(framealpha=0.0, ncol=1, fontsize=10)
apply_custom_settings(ax, leg, log_scale_y=True)
ax.set_xlabel(r'$t$ (s)')
ax.set_ylabel(r'$N_{ee}$ and $\vec{F}_{ee}$')
fig.savefig('Nee_and_Fee.pdf',bbox_inches='tight')
plt.clf()

# Plots N_xx and F_xx
fig, ax = plt.subplots()
ax.plot(t       , N_avg_mag[:,1,1]         , label = r'$N_{xx}$')
ax.plot(t       , F_avg_mag[:,0,1,1]       , label = r'$F^x_{xx}$') 
ax.plot(t       , F_avg_mag[:,1,1,1]       , label = r'$F^y_{xx}$')
ax.plot(t       , F_avg_mag[:,2,1,1]       , label = r'$F^z_{xx}$')
leg = ax.legend(framealpha=0.0, ncol=1, fontsize=10)
apply_custom_settings(ax, leg, log_scale_y=True)
ax.set_xlabel(r'$t$ (s)')
ax.set_ylabel(r'$N_{xx}$ and $\vec{F}_{xx}$')
fig.savefig('Nxx_and_Fxx.pdf',bbox_inches='tight')
plt.clf()

# Plots Nbar_eu and Fbar_eu
fig, ax = plt.subplots()
ax.plot(t       , Nbar_avg_mag[:,0,1]       , label = r'$\bar{N}_{ex}$')
ax.plot(t       , Fbar_avg_mag[:,0,0,1]       , label = r'$\bar{F}^x_{ex}$')
ax.plot(t       , Fbar_avg_mag[:,1,0,1]       , label = r'$\bar{F}^y_{ex}$')
ax.plot(t       , Fbar_avg_mag[:,2,0,1]       , label = r'$\bar{F}^z_{ex}$')
ax.plot(t[l1:l2], Nbar_avg_mag[:,0,1][l1:l2], label=f'Im$\\Omega_{{N_{{ex}}}}$ = {Nbar_eu_b:.3e}', linestyle = 'dotted')
ax.plot(t[l1:l2], Fbar_avg_mag[:,0,0,1][l1:l2], label = f'Im$\\Omega_{{\\bar{{F}}^x_{{ex}}}}$ = {Fbarx_eu_b:.3e}', linestyle = 'dotted')
ax.plot(t[l1:l2], Fbar_avg_mag[:,1,0,1][l1:l2], label = f'Im$\\Omega_{{\\bar{{F}}^y_{{ex}}}}$ = {Fbary_eu_b:.3e}', linestyle = 'dotted')
ax.plot(t[l1:l2], Fbar_avg_mag[:,2,0,1][l1:l2], label = f'Im$\\Omega_{{\\bar{{F}}^z_{{ex}}}}$ = {Fbarz_eu_b:.3e}', linestyle = 'dotted')
leg = ax.legend(framealpha=0.0, ncol=1, fontsize=10)
apply_custom_settings(ax, leg)
ax.set_xlabel(r'$t$ (s)')
ax.set_ylabel(r'$\bar{N}$ and $\vec{\bar{F}}$')
ax.set_yscale('log')
fig.savefig('Nbareu_and_Fbareu.pdf',bbox_inches='tight')
plt.clf()

# Plots Nbar_ee and Fbar_ee
fig, ax = plt.subplots()
ax.plot(t, Nbar_avg_mag[:,0,0]  , label = r'$\bar{N}_{ee}$')
ax.plot(t, Fbar_avg_mag[:,0,0,0], label = r'$\bar{F}^x_{ee}$') 
ax.plot(t, Fbar_avg_mag[:,1,0,0], label = r'$\bar{F}^y_{ee}$')
ax.plot(t, Fbar_avg_mag[:,2,0,0], label = r'$\bar{F}^z_{ee}$')
leg = ax.legend(framealpha=0.0, ncol=1, fontsize=10)
apply_custom_settings(ax, leg, log_scale_y=True)
ax.set_xlabel(r'$t$ (s)')
ax.set_ylabel(r'$\bar{N}_{ee}$ and $\vec{\bar{F}}_{ee}$')
fig.savefig('Nbaree_and_Fbaree.pdf',bbox_inches='tight')
plt.clf()

# Plots Nbar_xx and Fbar_xx
fig, ax = plt.subplots()
ax.plot(t, Nbar_avg_mag[:,1,1]  , label = r'$\bar{N}_{xx}$')
ax.plot(t, Fbar_avg_mag[:,0,1,1], label = r'$\bar{F}^x_{xx}$') 
ax.plot(t, Fbar_avg_mag[:,1,1,1], label = r'$\bar{F}^y_{xx}$')
ax.plot(t, Fbar_avg_mag[:,2,1,1], label = r'$\bar{F}^z_{xx}$')
leg = ax.legend(framealpha=0.0, ncol=1, fontsize=10)
apply_custom_settings(ax, leg, log_scale_y=True)
ax.set_xlabel(r'$t$ (s)')
ax.set_ylabel(r'$\bar{N}_{xx}$ and $\vec{\bar{F}}_{xx}$')
fig.savefig('Nbarxx_and_Fbarxx.pdf',bbox_inches='tight')
plt.clf()

# Plotting Julien and EMU simulations together with Lucas's LSA ImOmega.
fig, ax = plt.subplots()
ax.plot(time,N_eu_julien, label = r'$N_{ex}$ Julien script')
ax.plot(t, N_avg_mag[:,0,1], label = r'$N_{ex}$ EMU')
ax.plot(t[l1:l2], N_avg_mag[:,0,1][l1:l2],  label = f'{N_eu_b:.3e} = Im$\\Omega_{{N_{{ex}}}}$ EMU',  linestyle = 'dashed')
ax.plot(time[p1:p2],N_eu_julien[p1:p2], label = f'{Nbar_eu_b_julien:.3e} = Im$\\Omega_{{N_{{ex}}}}$ Julien',  linestyle = 'dashed')
ax.plot(time[p1:p2], 1e23*np.exp(N_and_Nbar_eu_b_LSA*time[p1:p2]), label = f'{N_and_Nbar_eu_b_LSA:.3e} = Im$\\Omega_{{N_{{ex}}}}$ Lucas LSA', linestyle = 'dashed')
leg = ax.legend(framealpha=0.0, ncol=1, fontsize=10)
apply_custom_settings(ax, leg, log_scale_y=True)
ax.set_xlabel(r'$t \ (\mathrm{s})$')
ax.set_ylabel(r'$N_{ex}$')
ax.set_title(f"Collisional flavor instability test")
fig.savefig('EMU_Julien_LucasLSA_Neu.pdf',bbox_inches='tight')
plt.clf()