'''
Created by Erick Urquilla, Department of Physics and Astronomy, University of Tennessee, Knoxville.
This script is used to generate an HDF5 file that contains background matter information: rho (density), Yâ‚‘ (electron fraction), and T (temperature). 
The HDF5 file generated by this script will be used as input for background matter quantities in EMU.
The data files dump_00001000.h5 and grid.h5 should be in the same directory as this script.
'''

import numpy as np
import h5py
import nsm_grid_generator
import nsm_rho_Ye_T_linear_interpolator
import time

# EMU grid parameters
# The following domain is optimal for the use
# of the LS220 EoS and the NuLib SFH EoS
ncellsx = 96 # scalar, number of cells in x-direction
ncellsy = 96 # scalar, number of cells in y-direction
ncellsz = 64 # scalar, number of cells in z-direction
xmin = -48.0e5 #cm
xmax = +48.0e5 #cm
ymin = -48.0e5 #cm
ymax = +48.0e5 #cm
zmin = -16.0e5 #cm
zmax = +48.0e5 #cm

# Create EMU mesh
centers, mesh = nsm_grid_generator.create_grid([ncellsx, ncellsy, ncellsz], [[xmin, xmax], [ymin, ymax], [zmin, zmax]]) # cm

start = time.time()
# Perform interpolation
indices, T_rho_Ye = nsm_rho_Ye_T_linear_interpolator.interpolate_Ye_rho_T(mesh)
end = time.time()
print(f'Interpolation time = {end - start} s')

# Create arrays to store the interpolated values of T, rho, and Ye.
rho = np.full( ( ncellsx, ncellsy, ncellsz ), 0.0 ) # array of size (ncellsx, ncellsy, ncellsz)
T = np.full( ( ncellsx, ncellsy, ncellsz ), 0.0 ) # array of size (ncellsx, ncellsy, ncellsz)
Ye = np.full( ( ncellsx, ncellsy, ncellsz ), 0.0 ) # array of size (ncellsx, ncellsy, ncellsz)

# Store the interpolated values of T, rho, and Ye.
T[indices]   = T_rho_Ye[:,0]
rho[indices] = T_rho_Ye[:,1]
Ye[indices]  = T_rho_Ye[:,2]

# LS220.H5 data
logrho_LS220 = [
    3, 3.05579, 3.11159, 3.16738, 3.22318, 3.27897, 3.33476, 3.39056,
    3.44635, 3.50215, 3.55794, 3.61373, 3.66953, 3.72532, 3.78112,
    3.83691, 3.8927, 3.9485, 4.00429, 4.06009, 4.11588, 4.17167,
    4.22747, 4.28326, 4.33906, 4.39485, 4.45064, 4.50644, 4.56223,
    4.61803, 4.67382, 4.72961, 4.78541, 4.8412, 4.897, 4.95279, 5.00858,
    5.06438, 5.12017, 5.17597, 5.23176, 5.28755, 5.34335, 5.39914,
    5.45494, 5.51073, 5.56652, 5.62232, 5.67811, 5.73391, 5.7897,
    5.84549, 5.90129, 5.95708, 6.01288, 6.06867, 6.12446, 6.18026,
    6.23605, 6.29185, 6.34764, 6.40343, 6.45923, 6.51502, 6.57082,
    6.62661, 6.6824, 6.7382, 6.79399, 6.84979, 6.90558, 6.96137,
    7.01717, 7.07296, 7.12876, 7.18455, 7.24034, 7.29614, 7.35193,
    7.40773, 7.46352, 7.51931, 7.57511, 7.6309, 7.6867, 7.74249,
    7.79828, 7.85408, 7.90987, 7.96567, 8.02146, 8.07725, 8.13305,
    8.18884, 8.24464, 8.30043, 8.35622, 8.41202, 8.46781, 8.52361,
    8.5794, 8.63519, 8.69099, 8.74678, 8.80258, 8.85837, 8.91416,
    8.96996, 9.02575, 9.08155, 9.13734, 9.19313, 9.24893, 9.30472,
    9.36052, 9.41631, 9.4721, 9.5279, 9.58369, 9.63948, 9.69528,
    9.75107, 9.80687, 9.86266, 9.91845, 9.97425, 10.03, 10.0858,
    10.1416, 10.1974, 10.2532, 10.309, 10.3648, 10.4206, 10.4764,
    10.5322, 10.588, 10.6438, 10.6996, 10.7554, 10.8112, 10.867,
    10.9227, 10.9785, 11.0343, 11.0901, 11.1459, 11.2017, 11.2575,
    11.3133, 11.3691, 11.4249, 11.4807, 11.5365, 11.5923, 11.6481,
    11.7039, 11.7597, 11.8155, 11.8712, 11.927, 11.9828, 12.0386,
    12.0944, 12.1502, 12.206, 12.2618, 12.3176, 12.3734, 12.4292,
    12.485, 12.5408, 12.5966, 12.6524, 12.7082, 12.7639, 12.8197,
    12.8755, 12.9313, 12.9871, 13.0429, 13.0987, 13.1545, 13.2103,
    13.2661, 13.3219, 13.3777, 13.4335, 13.4893, 13.5451, 13.6009,
    13.6567, 13.7124, 13.7682, 13.824, 13.8798, 13.9356, 13.9914,
    14.0472, 14.103, 14.1588, 14.2146, 14.2704, 14.3262, 14.382,
    14.4378, 14.4936, 14.5494, 14.6052, 14.6609, 14.7167, 14.7725,
    14.8283, 14.8841, 14.9399, 14.9957, 15.0515, 15.1073, 15.1631,
    15.2189, 15.2747, 15.3305, 15.3863, 15.4421, 15.4979, 15.5536,
    15.6094, 15.6652, 15.721, 15.7768, 15.8326, 15.8884, 15.9442, 16
]
# rho in g/cm^3
rho_LS220 = 10**np.array(logrho_LS220)
logtemp_LS220 = [
    -2, -1.96741, -1.93481, -1.90222, -1.86963, -1.83704, -1.80444,
    -1.77185, -1.73926, -1.70667, -1.67407, -1.64148, -1.60889, -1.5763,
    -1.5437, -1.51111, -1.47852, -1.44593, -1.41333, -1.38074, -1.34815,
    -1.31556, -1.28296, -1.25037, -1.21778, -1.18519, -1.15259, -1.12,
    -1.08741, -1.05481, -1.02222, -0.98963, -0.957037, -0.924444,
    -0.891852, -0.859259, -0.826667, -0.794074, -0.761481, -0.728889,
    -0.696296, -0.663704, -0.631111, -0.598519, -0.565926, -0.533333,
    -0.500741, -0.468148, -0.435556, -0.402963, -0.37037, -0.337778,
    -0.305185, -0.272593, -0.24, -0.207407, -0.174815, -0.142222,
    -0.10963, -0.077037, -0.0444444, -0.0118519, 0.0207407, 0.0533333,
    0.0859259, 0.118519, 0.151111, 0.183704, 0.216296, 0.248889,
    0.281481, 0.314074, 0.346667, 0.379259, 0.411852, 0.444444,
    0.477037, 0.50963, 0.542222, 0.574815, 0.607407, 0.64, 0.672593,
    0.705185, 0.737778, 0.77037, 0.802963, 0.835556, 0.868148, 0.900741,
    0.933333, 0.965926, 0.998519, 1.03111, 1.0637, 1.0963, 1.12889,
    1.16148, 1.19407, 1.22667, 1.25926, 1.29185, 1.32444, 1.35704,
    1.38963, 1.42222, 1.45481, 1.48741, 1.52, 1.55259, 1.58519,
    1.61778, 1.65037, 1.68296, 1.71556, 1.74815, 1.78074, 1.81333,
    1.84593, 1.87852, 1.91111, 1.9437, 1.9763, 2.00889, 2.04148,
    2.07407, 2.10667, 2.13926, 2.17185, 2.20444, 2.23704, 2.26963,
    2.30222, 2.33481, 2.36741, 2.4
]
# Temperature in MeV
temp_LS220 = 10**np.array(logtemp_LS220)
Ye_LS220 = [
    0.035, 0.0455102, 0.0560204, 0.0665306, 0.0770408, 0.087551,
    0.0980612, 0.108571, 0.119082, 0.129592, 0.140102, 0.150612,
    0.161122, 0.171633, 0.182143, 0.192653, 0.203163, 0.213673,
    0.224184, 0.234694, 0.245204, 0.255714, 0.266224, 0.276735,
    0.287245, 0.297755, 0.308265, 0.318776, 0.329286, 0.339796,
    0.350306, 0.360816, 0.371327, 0.381837, 0.392347, 0.402857,
    0.413367, 0.423878, 0.434388, 0.444898, 0.455408, 0.465918,
    0.476429, 0.486939, 0.497449, 0.507959, 0.518469, 0.52898, 0.53949,
    0.55
]

# NuLib_SFH.h5 data
# rho in g/cm^3
rho_points_NuLib_SFH = [ 1e+06, 1.31004e+06, 1.7162e+06, 2.24829e+06, 2.94534e+06,
    3.85851e+06, 5.0548e+06, 6.62198e+06, 8.67504e+06, 1.13646e+07,
    1.48881e+07, 1.9504e+07, 2.5551e+07, 3.34727e+07, 4.38506e+07,
    5.74459e+07, 7.52564e+07, 9.85887e+07, 1.29155e+08, 1.69198e+08,
    2.21656e+08, 2.90378e+08, 3.80406e+08, 4.98346e+08, 6.52852e+08,
    8.55261e+08, 1.12042e+09, 1.4678e+09, 1.92287e+09, 2.51904e+09,
    3.30003e+09, 4.32317e+09, 5.66352e+09, 7.41943e+09, 9.71973e+09,
    1.27332e+10, 1.6681e+10, 2.18528e+10, 2.86279e+10, 3.75037e+10,
    4.91313e+10, 6.43638e+10, 8.43191e+10, 1.10461e+11, 1.44708e+11,
    1.89574e+11, 2.48349e+11, 3.25346e+11, 4.26216e+11, 5.58359e+11,
    7.31472e+11, 9.58256e+11, 1.25535e+12, 1.64456e+12, 2.15443e+12,
    2.82239e+12, 3.69744e+12, 4.84379e+12, 6.34555e+12, 8.31291e+12,
    1.08902e+13, 1.42666e+13, 1.86898e+13, 2.44844e+13, 3.20755e+13,
    4.20201e+13, 5.50479e+13, 7.21148e+13, 9.44732e+13, 1.23764e+14,
    1.62135e+14, 2.12403e+14, 2.78256e+14, 3.64526e+14, 4.77543e+14,
    6.25599e+14, 8.19559e+14, 1.07365e+15, 1.40653e+15, 1.8426e+15,
    2.41388e+15, 3.16228e+15
]
# Temperature in MeV
temp_points_NuLib_SFH = [
    0.05, 0.0566631, 0.064214, 0.0727713, 0.0824689, 0.0934588, 0.105913,
    0.120027, 0.136022, 0.154149, 0.174691, 0.19797, 0.224352, 0.25425,
    0.288131, 0.326528, 0.370041, 0.419354, 0.475237, 0.538568,
    0.610338, 0.691672, 0.783845, 0.888302, 1.00668, 1.14083, 1.29286,
    1.46514, 1.66039, 1.88166, 2.13241, 2.41658, 2.73861, 3.10356,
    3.51715, 3.98585, 4.51701, 5.11895, 5.80111, 6.57417, 7.45025,
    8.44308, 9.56821, 10.8433, 12.2883, 13.9258, 15.7816, 17.8847,
    20.268, 22.9689, 26.0298, 29.4986, 33.4296, 37.8845, 42.933,
    48.6543, 55.138, 62.4858, 70.8127, 80.2493, 90.9434, 103.063,
    116.797, 132.361, 150
]
# Ye adimensional
Ye_points_NuLib_SFH = [
    0.035, 0.0453, 0.0556, 0.0659, 0.0762, 0.0865, 0.0968, 0.1071,
    0.1174, 0.1277, 0.138, 0.1483, 0.1586, 0.1689, 0.1792, 0.1895,
    0.1998, 0.2101, 0.2204, 0.2307, 0.241, 0.2513, 0.2616, 0.2719,
    0.2822, 0.2925, 0.3028, 0.3131, 0.3234, 0.3337, 0.344, 0.3543,
    0.3646, 0.3749, 0.3852, 0.3955, 0.4058, 0.4161, 0.4264, 0.4367,
    0.447, 0.4573, 0.4676, 0.4779, 0.4882, 0.4985, 0.5088, 0.5191,
    0.5294, 0.5397, 0.55
]

# Nulib table limits
rho_fb_center_NuLib = rho_points_NuLib_SFH[0] + 0.1*(rho_points_NuLib_SFH[1]-rho_points_NuLib_SFH[0]) # g/cm^3
rho_fb_center_LS220 = rho_LS220[0] + 0.1*(rho_LS220[1]-rho_LS220[0]) # g/cm^3
temp_fb_center_NuLib = temp_points_NuLib_SFH[0] + 0.1*(temp_points_NuLib_SFH[1]-temp_points_NuLib_SFH[0]) # MeV
temp_fb_center_LS220 = temp_LS220[0] + 0.1*(temp_LS220[1]-temp_LS220[0]) # MeV
Ye_fb_center_NuLib = Ye_points_NuLib_SFH[0] + 0.1*(Ye_points_NuLib_SFH[1]-Ye_points_NuLib_SFH[0]) # adimensional
Ye_fb_center_LS220 = Ye_LS220[0] + 0.1*(Ye_LS220[1]-Ye_LS220[0]) # adimensional

rho_lb_center_NuLib = rho_points_NuLib_SFH[-1] - 0.1*(rho_points_NuLib_SFH[-1]-rho_points_NuLib_SFH[-2]) # g/cm^3
rho_lb_center_LS220 = rho_LS220[-1] - 0.1*(rho_LS220[-1]-rho_LS220[-2]) # g/cm^3
temp_lb_center_NuLib = temp_points_NuLib_SFH[-1] - 0.1*(temp_points_NuLib_SFH[-1]-temp_points_NuLib_SFH[-2]) # MeV
temp_lb_center_LS220 = temp_LS220[-1] - 0.1*(temp_LS220[-1]-temp_LS220[-2]) # MeV
Ye_lb_center_NuLib = Ye_points_NuLib_SFH[-1] - 0.1*(Ye_points_NuLib_SFH[-1]-Ye_points_NuLib_SFH[-2]) # adimensional
Ye_lb_center_LS220 = Ye_LS220[-1] - 0.1*(Ye_LS220[-1]-Ye_LS220[-2]) # adimensional

# Nulib table limits
rhomin  = max(rho_fb_center_NuLib, rho_fb_center_LS220) # g/cm^3
rhomax  = min(rho_lb_center_NuLib, rho_lb_center_LS220) # g/cm^3
tempmin = max(temp_fb_center_NuLib, temp_fb_center_LS220) # MeV
tempmax = min(temp_lb_center_NuLib, temp_lb_center_LS220) # MeV
yemin   = max(Ye_fb_center_NuLib, Ye_fb_center_LS220) # adimensional
yemax   = min(Ye_lb_center_NuLib, Ye_lb_center_LS220) # adimensional

print(f"rhomin = {rhomin:.2e} # g/cm^3")
print(f"rhomax = {rhomax:.2e} # g/cm^3")
print(f"tempmin = {tempmin:.2e} # MeV")
print(f"tempmax = {tempmax:.2e} # MeV")
print(f"yemin = {yemin:.2e} # adimensional")
print(f"yemax = {yemax:.2e} # adimensional")

# Find indices where the data is out of the limits
out_of_bounds_indices = np.where((T < tempmin) | (T > tempmax) | 
                                 (rho < rhomin) | (rho > rhomax) | 
                                 (Ye < yemin) | (Ye > yemax))

# Print the indices
if len(out_of_bounds_indices[0]) > 0:
    print(f"Number of cells out of EoS and NuLib bounds: {len(out_of_bounds_indices[0])}/{ncellsx*ncellsy*ncellsz}")
    # print("Indices where T, rho, or Ye are out of bounds:", np.stack(out_of_bounds_indices).T)

# Ensure that all components of T, rho, and Ye are within the specified limits
T = np.clip(T, tempmin, tempmax)
rho = np.clip(rho, rhomin, rhomax)
Ye = np.clip(Ye, yemin, yemax)

# Write hdf5 file with all the data
with h5py.File('rho_Ye_T.hdf5', 'w') as hdf:
    hdf.create_dataset("ncellsx", data=ncellsx)
    hdf.create_dataset("ncellsy", data=ncellsy)
    hdf.create_dataset("ncellsz", data=ncellsz)
    hdf.create_dataset("xmin_cm", data=xmin)
    hdf.create_dataset("xmax_cm", data=xmax)
    hdf.create_dataset("ymin_cm", data=ymin)
    hdf.create_dataset("ymax_cm", data=ymax)
    hdf.create_dataset("zmin_cm", data=zmin)
    hdf.create_dataset("zmax_cm", data=zmax)
    hdf.create_dataset("rho_g|ccm", data=rho)
    hdf.create_dataset("T_Mev", data=T)
    hdf.create_dataset("Ye", data=Ye)